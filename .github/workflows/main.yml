name: Build ANGLE - Android ARM64 (Targeting Android 14)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_angle_android_arm64_api34:
    runs-on: ubuntu-latest
    # Add permissions for actions/upload-artifact if your repo requires it
    # permissions:
    #   contents: read
    #   actions: write

    env:
      ANDROID_NDK_VERSION: r26d
      TARGET_ANDROID_API_LEVEL: 34
      DEPOT_TOOLS_WINTOOLCHAIN: 0

    steps:
      # 1. Install depot_tools (Needed for gclient)
      - name: Install depot_tools
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git ${{ github.workspace }}/depot_tools
          echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
          echo "DEPOT_TOOLS_PATH=${{ github.workspace }}/depot_tools" >> $GITHUB_ENV

      # 2. Verify depot_tools installation
      - name: Verify depot_tools
        run: which gclient

      # 3. Install Android NDK
      - name: Install Android NDK ${{ env.ANDROID_NDK_VERSION }}
        run: |
          sudo apt-get update && sudo apt-get install -y wget unzip python3 --no-install-recommends
          NDK_FILENAME=android-ndk-${{ env.ANDROID_NDK_VERSION }}-linux-x86_64.zip
          NDK_DOWNLOAD_URL=https://dl.google.com/android/repository/${NDK_FILENAME}
          NDK_EXTRACT_DIR=${{ github.workspace }}/android-ndk
          NDK_PATH_VERSIONED=${NDK_EXTRACT_DIR}/android-ndk-${{ env.ANDROID_NDK_VERSION }}

          echo "Downloading NDK from ${NDK_DOWNLOAD_URL}..."

          RETRY_COUNT=3
          for i in $(seq 1 $RETRY_COUNT); do
            echo "Attempt $i: Downloading NDK..."
            wget --quiet ${NDK_DOWNLOAD_URL} -O ${NDK_FILENAME}
            if [ $? -eq 0 ]; then
              echo "NDK Downloaded successfully on attempt $i."
              break # Exit loop if download is successful
            else
              echo "Download failed on attempt $i. Retrying in 5 seconds..."
              sleep 5
            fi
            if [ $i -eq $RETRY_COUNT ]; then
              echo "Download failed after $RETRY_COUNT attempts. Exiting."
              exit 1 # Fail the step after max retries
            fi
          done

          echo "Extracting NDK to ${NDK_EXTRACT_DIR}..."
          unzip -q ${NDK_FILENAME} -d ${NDK_EXTRACT_DIR}
          rm ${NDK_FILENAME} # Clean up the zip file

          # Set ANDROID_NDK_ROOT environment variable for build scripts
          echo "ANDROID_NDK_ROOT=${NDK_PATH_VERSIONED}" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT set to ${NDK_PATH_VERSIONED}"
          # Verify NDK extraction
          ls -l ${NDK_PATH_VERSIONED}

      # 4. Checkout ANGLE Source Code using gclient
      - name: Checkout ANGLE Source Code
        run: |
          mkdir angle_build_dir
          cd angle_build_dir
          gclient config --unmanaged https://chromium.googlesource.com/angle/angle.git
          # Fetch ANGLE source and its dependencies
          # Using --no-history can speed things up if full history isn't needed
          gclient sync --no-history -j$(nproc)

      # 5. Configure ANGLE Build (GN) - Android ARM64 API 34
      - name: Configure ANGLE Build (GN) - Android ARM64 API ${{ env.TARGET_ANDROID_API_LEVEL }}
        working-directory: angle_build_dir/angle
        run: |
          echo "Using ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT}"
          echo "Targeting Android API Level: ${{ env.TARGET_ANDROID_API_LEVEL }}"
          # Add android_ndk_api_level to gn args - Directly use environment variable to avoid trailing spaces
          # Explicitly request building with Android SDK: build_with_android_sdk=true
          gn gen out/Android_ARM64_API${{ env.TARGET_ANDROID_API_LEVEL }} --args="target_os=\"android\" target_cpu=\"arm64\" android_ndk_root=\"${ANDROID_NDK_ROOT}\" android_ndk_api_level=$TARGET_ANDROID_API_LEVEL is_debug=false is_component_build=false angle_enable_essl=true angle_enable_gl=false angle_enable_gl_desktop=false angle_enable_gles1=false angle_enable_vulkan=true angle_enable_d3d9=false angle_enable_d3d11=false angle_enable_metal=false angle_build_tests=false use_goma=false is_clang=true use_custom_libcxx=false build_with_android_sdk=true"

      # 6. Build ANGLE (Ninja) - Android ARM64
      - name: Build ANGLE (Ninja) - Android ARM64 API ${{ env.TARGET_ANDROID_API_LEVEL }}
        working-directory: angle_build_dir/angle
        run: |
          ninja -C out/Android_ARM64_API${{ env.TARGET_ANDROID_API_LEVEL }} angle_shared_library -j$(nproc)

      # 7. Verify Build Output
      - name: Verify Build Output
        run: ls -l angle_build_dir/angle/out/Android_ARM64_API${{ env.TARGET_ANDROID_API_LEVEL }}/*angle*.*so*

      # 8. Upload Build Artifacts - Android ARM64
      - name: Upload Build Artifacts - Android ARM64 API ${{ env.TARGET_ANDROID_API_LEVEL }}
        uses: actions/upload-artifact@v4
        with:
          name: angle-android-arm64-api${{ env.TARGET_ANDROID_API_LEVEL }}-release-build
          path: angle_build_dir/angle/out/Android_ARM64_API${{ env.TARGET_ANDROID_API_LEVEL }}/libangle.so
          if-no-files-found: error # Fail the workflow if the library wasn't built